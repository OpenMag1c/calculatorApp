{"version":3,"file":"static/js/385.1f7e9c3c.chunk.js","mappings":"wJAMA,IAJoB,SAACA,GACnB,OAAO,wBAAOA,M,4ECHT,IAAMC,EAAa,uCACbC,EAAkB,yB,wLCClBC,EAAUC,EAAAA,GAAAA,IAAH,qDAKPC,EAAQD,EAAAA,GAAAA,GAAH,0DACP,qBAAGE,MAAkBC,OAAOC,S,GAIZJ,EAAAA,GAAAA,OAAH,gF,SCVXK,GAAoBL,EAAAA,EAAAA,IAAO,MAAPA,CAAH,iFAMjBM,GAAiBN,EAAAA,EAAAA,IAAO,MAAPA,CAAH,gKAIL,qBAAGE,MAAkBC,OAAOC,SAKrCG,GAAwBP,EAAAA,EAAAA,IAAO,MAAPA,CAAH,sBAErBQ,GAAeR,EAAAA,EAAAA,IAAO,KAAPA,CAAH,4HAGH,qBAAGE,MAAkBC,OAAOC,SAKrCK,GAAWT,EAAAA,EAAAA,IAAO,KAAPA,CAAH,qJAMH,qBAAGE,MAAkBC,OAAOO,Q,6BCrBxCC,EAAe,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACzC,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KASA,OACE,UAACZ,EAAD,YACE,UAACC,EAAD,CAAgBY,QATH,kBAAMD,GAAWD,IAS9B,UACGH,EAASM,MACV,SAACC,EAAA,EAAD,CAAaC,UAAWvB,EAAAA,OAEzBkB,IACC,SAACT,EAAD,WACE,SAACC,EAAD,UACGI,EAAQU,KAAI,SAACC,GAAD,OACX,SAACd,EAAD,CAA0BS,SAfbM,EAesCD,EAf5B,WACjCT,EAAYU,GACZP,GAAU,KAaA,SACGM,EAAOJ,MADKI,EAAOE,IAfV,IAACD,aA0B3B,EAAeE,EAAAA,KAAWf,G,6BC7BpBgB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAY/B,GAAQ,IAAD,yBACjB,cAAMA,IAORgC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAED,SAAAA,KAChBE,EAAAA,EAAAA,GAAsBF,GACL,EAAKjC,MAAdoC,KACHJ,eAAeC,EAASJ,KAZZ,EAenBQ,YAAc,SAAC/B,GACb,EAAKgC,QAAQhC,GACb,EAAK4B,SAAS,CAAE5B,MAAAA,KAfhB,EAAKiC,MAAQ,CACXjC,OAAOkC,EAAAA,EAAAA,KACPP,UAAUQ,EAAAA,EAAAA,MAJK,EAsClB,OAhCA,8BAcD,WACE,MAA4BC,KAAKH,MAAzBjC,EAAR,EAAQA,MAAO2B,EAAf,EAAeA,SACPU,EAAMD,KAAK1C,MAAX2C,EACR,OACE,UAACxC,EAAD,YACE,SAACE,EAAD,UAAQsC,EAAE,sBACV,SAACC,EAAD,CACE5B,QAAS6B,EAAAA,EACT5B,SAAUX,EACVY,YAAawB,KAAKL,eAEpB,SAACO,EAAD,CACE5B,QAAS8B,EAAAA,EACT7B,SAAUgB,EACVf,YAAawB,KAAKV,wBAIzB,EAvCGD,CAAiBD,EAAAA,WA0CvBC,EAASgB,YAAcC,EAAAA,EAEvB,OAAeC,EAAAA,EAAAA,IAAf,CAAiClB","sources":["components/IconAwesome/index.jsx","constants/icons.js","screens/Settings/styled.js","components/DropDown/styled.js","components/DropDown/index.jsx","screens/Settings/index.js"],"sourcesContent":["import React from \"react\";\n\nconst IconAwesome = (props) => {\n  return <i {...props} />;\n};\n\nexport default IconAwesome;\n","export const ICON_ERROR = \"fa-solid fa-circle-exclamation fa-3x\";\nexport const ICON_DOWN_ARROW = \"fa-solid fa-sort-down\";\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  flex: 1;\n  margin: 5rem;\n`;\n\nexport const Title = styled.h1`\n  color: ${({ theme }) => theme.colors.black};\n  margin: 2rem 0;\n`;\n\nexport const SelectTheme = styled.select`\n  padding: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const DropDownContainer = styled(\"div\")`\n  width: 10.5em;\n  margin: 1rem 0;\n  cursor: pointer;\n`;\n\nexport const DropDownHeader = styled(\"div\")`\n  display: flex;\n  justify-content: space-between;\n  padding: 1rem;\n  border: 1px solid ${({ theme }) => theme.colors.black};\n  color: black;\n  background: white;\n`;\n\nexport const DropDownListContainer = styled(\"div\")``;\n\nexport const DropDownList = styled(\"ul\")`\n  margin: 0;\n  background: white;\n  border: 1px solid ${({ theme }) => theme.colors.black};\n  border-top: none;\n  color: black;\n`;\n\nexport const ListItem = styled(\"li\")`\n  list-style: none;\n  padding: 1rem;\n  transition: 0.2s all;\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.dark};\n    color: white;\n  }\n`;\n","import React, { useState } from \"react\";\n\nimport {\n  DropDownContainer,\n  DropDownHeader,\n  DropDownList,\n  DropDownListContainer,\n  ListItem,\n} from \"./styled\";\nimport IconAwesome from \"../IconAwesome\";\nimport { ICON_DOWN_ARROW } from \"../../constants/icons\";\n\nconst DropDownMenu = ({ options, selected, setSelected }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggling = () => setIsOpen(!isOpen);\n\n  const onOptionClicked = (value) => () => {\n    setSelected(value);\n    setIsOpen(false);\n  };\n\n  return (\n    <DropDownContainer>\n      <DropDownHeader onClick={toggling}>\n        {selected.name}\n        <IconAwesome className={ICON_DOWN_ARROW} />\n      </DropDownHeader>\n      {isOpen && (\n        <DropDownListContainer>\n          <DropDownList>\n            {options.map((option) => (\n              <ListItem key={option.id} onClick={onOptionClicked(option)}>\n                {option.name}\n              </ListItem>\n            ))}\n          </DropDownList>\n        </DropDownListContainer>\n      )}\n    </DropDownContainer>\n  );\n};\n\nexport default React.memo(DropDownMenu);\n","import React from \"react\";\n\nimport { withTranslation } from \"react-i18next\";\nimport { getThemeFromStorage } from \"../../helpers/localStorage/theme\";\nimport {\n  getLanguageFromStorage,\n  saveLanguageToStorage,\n} from \"../../helpers/localStorage/language\";\nimport { Title, Wrapper } from \"./styled\";\nimport DropDownMenu from \"../../components/DropDown\";\nimport { themes } from \"../../settings/themes\";\nimport { languages } from \"../../settings/languages\";\nimport ThemeContext from \"../../helpers/themeContext\";\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: getThemeFromStorage(),\n      language: getLanguageFromStorage(),\n    };\n  }\n\n  changeLanguage = (language) => {\n    this.setState({ language });\n    saveLanguageToStorage(language);\n    const { i18n } = this.props;\n    i18n.changeLanguage(language.id);\n  };\n\n  changeTheme = (theme) => {\n    this.context(theme);\n    this.setState({ theme });\n  };\n\n  render() {\n    const { theme, language } = this.state;\n    const { t } = this.props;\n    return (\n      <Wrapper>\n        <Title>{t(\"routes.settings\")}</Title>\n        <DropDownMenu\n          options={themes}\n          selected={theme}\n          setSelected={this.changeTheme}\n        />\n        <DropDownMenu\n          options={languages}\n          selected={language}\n          setSelected={this.changeLanguage}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nSettings.contextType = ThemeContext;\n\nexport default withTranslation()(Settings);\n"],"names":["props","ICON_ERROR","ICON_DOWN_ARROW","Wrapper","styled","Title","theme","colors","black","DropDownContainer","DropDownHeader","DropDownListContainer","DropDownList","ListItem","dark","DropDownMenu","options","selected","setSelected","useState","isOpen","setIsOpen","onClick","name","IconAwesome","className","map","option","value","id","React","Settings","changeLanguage","language","setState","saveLanguageToStorage","i18n","changeTheme","context","state","getThemeFromStorage","getLanguageFromStorage","this","t","DropDown","themes","languages","contextType","ThemeContext","withTranslation"],"sourceRoot":""}